/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin, Config, UserInfo } from "./MyProject.types";
export interface MyProjectReadOnlyInterface {
  contractAddress: string;
  resolveUserInfo: ({
    address
  }: {
    address: number[];
  }) => Promise<UserInfo>;
  config: () => Promise<Config>;
}
export class MyProjectQueryClient implements MyProjectReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.resolveUserInfo = this.resolveUserInfo.bind(this);
    this.config = this.config.bind(this);
  }

  resolveUserInfo = async ({
    address
  }: {
    address: number[];
  }): Promise<UserInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      resolve_user_info: {
        address
      }
    });
  };
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface MyProjectInterface extends MyProjectReadOnlyInterface {
  contractAddress: string;
  sender: string;
  register: ({
    bio,
    did,
    username
  }: {
    bio: string;
    did: string;
    username: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MyProjectClient extends MyProjectQueryClient implements MyProjectInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.register = this.register.bind(this);
  }

  register = async ({
    bio,
    did,
    username
  }: {
    bio: string;
    did: string;
    username: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register: {
        bio,
        did,
        username
      }
    }, fee, memo, _funds);
  };
}